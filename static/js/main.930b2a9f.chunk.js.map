{"version":3,"sources":["core/threejs/STLViewer.ts","context/main.ts","hooks/usePrevious.tsx","components/ThreeRenderer.tsx","containers/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loadSTL","context","loader","model","onError","renderer","controls","camera","scene","load","window","location","href","geometry","material","THREE","color","specular","shininess","mesh","name","add","middle","computeBoundingBox","boundingBox","getCenter","position","x","y","z","largestDimension","Math","max","animate","requestAnimationFrame","update","render","err","console","error","STLViewer","container","setSize","clientWidth","clientHeight","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","STLLoader","mainContext","antialias","alpha","OrbitControls","enableDamping","rotateSpeed","dampingFactor","enableZoom","enablePan","contructorThreeObjects","containerId","threeContext","createContext","currentState","usePrevious","value","ref","useRef","useEffect","current","ThreeRenderer","useContext","inputRef","previousModel","object","getObjectByProperty","remove","removeEntity","document","querySelector","style","margin","width","height","id","Home","useState","setModel","setError","onClick","App","AppContext","background","Provider","to","path","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.930b2a9f.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\n\r\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader\";\r\nimport { MainContextType } from \"../../context/main\";\r\n\r\ninterface removeEntityProps {\r\n  context: MainContextType;\r\n  model: string;\r\n}\r\n\r\nexport const removeEntity = ({ context, model }: removeEntityProps) => {\r\n  const { scene, renderer, controls, camera } = context;\r\n  const object = scene.getObjectByProperty(\"name\", model);\r\n  if (object) scene.remove(object);\r\n  var animate = function () {\r\n    requestAnimationFrame(animate);\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n  };\r\n  animate();\r\n};\r\n\r\nexport interface STLViewerProps {\r\n  context: MainContextType;\r\n  model: string;\r\n  container: Element;\r\n  onError: (...args: any[]) => void;\r\n}\r\n\r\nfunction STLViewer({ context, container, model, onError }: STLViewerProps) {\r\n  const { renderer, camera } = context;\r\n  renderer.setSize(container!.clientWidth, container!.clientHeight);\r\n  container!.appendChild(renderer.domElement);\r\n\r\n  window.addEventListener(\r\n    // put on The componentn on mount\r\n    \"resize\",\r\n    function () {\r\n      renderer.setSize(container!.clientWidth, container!.clientHeight);\r\n      camera.aspect = container!.clientWidth / container!.clientHeight;\r\n      camera.updateProjectionMatrix();\r\n    },\r\n    false\r\n  );\r\n\r\n  const loader = new STLLoader();\r\n  loadSTL({ context, loader, model, onError });\r\n}\r\n\r\nexport interface loadSTLProps extends Omit<STLViewerProps, \"container\"> {\r\n  loader: STLLoader;\r\n}\r\n\r\nconst loadSTL = ({ context, loader, model, onError }: loadSTLProps) => {\r\n  const { renderer, controls, camera, scene } = context;\r\n  loader.load(\r\n    window.location.href + `${model}.stl`,\r\n    function (geometry) {\r\n      var material = new THREE.MeshPhongMaterial({\r\n        color: 0xff5533,\r\n        specular: 100,\r\n        shininess: 0,\r\n      });\r\n      var mesh = new THREE.Mesh(geometry, material);\r\n      mesh.name = model;\r\n      scene.add(mesh);\r\n\r\n      // Compute the middle\r\n      var middle = new THREE.Vector3();\r\n      geometry.computeBoundingBox();\r\n      geometry.boundingBox!.getCenter(middle);\r\n\r\n      // Center it\r\n      mesh.position.x = -1 * middle.x;\r\n      mesh.position.y = -1 * middle.y;\r\n      mesh.position.z = -1 * middle.z;\r\n\r\n      // Pull the camera away as needed\r\n      var largestDimension = Math.max(\r\n        geometry.boundingBox!.max.x,\r\n        geometry.boundingBox!.max.y,\r\n        geometry.boundingBox!.max.z\r\n      );\r\n\r\n      camera.position.z = largestDimension * 2;\r\n\r\n      var animate = function () {\r\n        requestAnimationFrame(animate);\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n      };\r\n      animate();\r\n    },\r\n    () => {},\r\n    function (err) {\r\n      console.error(err, \"An error happened\");\r\n      onError(true);\r\n    }\r\n  );\r\n};\r\nexport default STLViewer;\r\n","import { createContext } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst contructorThreeObjects = () => {\r\n  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n  const camera = new THREE.PerspectiveCamera(60, 1, 1, 1000);\r\n  camera.position.x = 60;\r\n  camera.position.y = 45;\r\n  camera.position.z = 45;\r\n  const controls = new OrbitControls(camera, renderer.domElement);\r\n  controls.enableDamping = true;\r\n  controls.rotateSpeed = 0.15;\r\n  controls.dampingFactor = 0.1;\r\n  controls.enableZoom = false;\r\n  controls.enablePan = false;\r\n\r\n  return {\r\n    controls,\r\n    renderer,\r\n    camera,\r\n  };\r\n};\r\nconst mainContext = {\r\n  ...contructorThreeObjects(),\r\n  scene: new THREE.Scene(),\r\n  containerId: \"stlViewer\",\r\n};\r\n\r\nexport type MainContextType = typeof mainContext;\r\n\r\nexport const threeContext = createContext(mainContext);\r\nexport const currentState = mainContext;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nfunction usePrevious(value: any) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default usePrevious;\r\n","import React, { FC, useRef, useContext, useEffect } from \"react\";\r\nimport STLViewer, { removeEntity } from \"../core/threejs/STLViewer\";\r\nimport { threeContext } from \"../context/main\";\r\nimport usePrevious from \"../hooks/usePrevious\";\r\n\r\ninterface ThreeRendererProps {\r\n  model: string;\r\n  container: Element | undefined | null;\r\n  onError: (...args: any[]) => void;\r\n}\r\n\r\nconst ThreeRenderer: FC<ThreeRendererProps> = ({\r\n  container,\r\n  model,\r\n  onError,\r\n}) => {\r\n  const context = useContext(threeContext);\r\n  const { renderer, containerId } = context;\r\n  const inputRef = useRef<HTMLElement | null>(null);\r\n\r\n  const previousModel = usePrevious(model) || \"\";\r\n  useEffect(() => {\r\n    if (container) {\r\n      removeEntity({ context, model: previousModel });\r\n      STLViewer({ context, container, model, onError });\r\n    }\r\n    return () => {};\r\n  }, [model, context, onError, container, previousModel]);\r\n  useEffect(() => {\r\n    inputRef.current = document.querySelector(\"#stlViewer\");\r\n    renderer.setSize(\r\n      inputRef.current!.clientWidth,\r\n      inputRef.current!.clientHeight\r\n    );\r\n    STLViewer({ context, container: inputRef!.current!, model, onError });\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{ margin: \"0 auto\", width: \"500px\", height: \"500px\" }}\r\n      id={containerId}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default ThreeRenderer;\r\n","import React, { FC, useState } from \"react\";\r\nimport ThreeRenderer from \"../components/ThreeRenderer\";\r\n\r\ninterface HomeProps {}\r\n\r\nconst Home: FC<HomeProps> = () => {\r\n  const [model, setModel] = useState(\"test\");\r\n  const [error, setError] = useState(false);\r\n  const container = document.querySelector(\"#stlViewer\");\r\n  return (\r\n    <div>\r\n      <button onClick={() => setModel(\"test\")}>Model 1</button>\r\n      <button onClick={() => setModel(\"test2\")}>Model 2</button>\r\n      <button onClick={() => setModel(\"test3\")}>Model 3</button>\r\n      <ThreeRenderer container={container} onError={setError} model={model} />\r\n      {error && <p style={{ color: \"red\" }}>Error al cargar un archivo</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useContext } from \"react\";\nimport * as THREE from \"three\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./containers/Home\";\nimport { threeContext as AppContext, currentState } from \"./context/main\";\n\nconst App = () => {\n  const context = useContext(AppContext);\n  const { scene } = context;\n  scene.background = new THREE.Color(\"rgb(0, 0, 0)\");\n  scene.name = \"Escena principal\";\n  scene.add(new THREE.HemisphereLight(0xff5533, 1.5));\n\n  return (\n    <AppContext.Provider value={currentState}>\n      <Router>\n        <p> Nav</p>\n        <div>\n          <Link to=\"/visual\">Prueba</Link>\n        </div>\n        <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}